{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeHolder","handleChange","type","placeholder","onChange","App","state","searchField","fetch","then","response","json","users","setState","this","filteredMonsters","filter","toLowerCase","includes","e","target","value","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mTAGaA,EAAO,SAACC,GACjB,OACI,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,6BAAKL,EAAMI,QAAQE,OACnB,4BAAIN,EAAMI,QAAQG,YCJjBC,EAAW,SAACR,GACrB,OACI,qBAAKC,UAAU,YAAf,SACID,EAAMS,SAASC,KACX,SAACN,GAAD,OAAa,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCLnCM,G,MAAY,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,aACpC,OACI,uBAAOC,KAAK,SAASC,YAAaH,EAAaX,UAAU,SAASe,SAAUH,MC8BrEI,E,kDA7BX,WAAYjB,GAAQ,IAAD,8BACf,cAAMA,IAEDkB,MAAQ,CACTT,SAAU,GACVU,YAAa,IALF,E,qDASnB,WAAqB,IAAD,OAChBC,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKC,SAAS,CAAChB,SAAUe,S,oBAGhD,WAAU,IAAD,OACL,EAAgCE,KAAKR,MAA9BT,EAAP,EAAOA,SAAUU,EAAjB,EAAiBA,YACXQ,EAAmBlB,EAASmB,QAAO,SAACxB,GAAD,OAAaA,EAAQE,KAAKuB,cAAcC,SAASX,EAAYU,kBAEtG,OACI,sBAAK5B,UAAU,MAAf,UACI,kDACD,cAAC,EAAD,CAAWW,YAAY,kBAAkBC,aAAc,SAACkB,GAAD,OAAO,EAAKN,SAAS,CAACN,YAAaY,EAAEC,OAAOC,WAClG,cAAC,EAAD,CAAUxB,SAAUkB,W,GAxBlBO,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.82eeff13.chunk.js","sourcesContent":["import React from 'react';\nimport './card.styles.css';\n\nexport const Card = (props) => {\n    return (\n        <div className='card-container'>\n            <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} />\n            <h2>{props.monster.name}</h2>\n            <p>{props.monster.email}</p>\n        </div>\n    );\n};\n","import React from \"react\";\nimport './card-list.styles.css';\nimport {Card} from \"../card/card.component\";\n\nexport const CardList = (props) => {\n    return (\n        <div className='card-list'>{\n            props.monsters.map(\n                (monster) => <Card key={monster.id} monster={monster}/>\n            )\n        }</div>\n    );\n}\n\n","import React from 'react';\nimport './search-box.styles.css';\n\nexport const SearchBox = ({placeHolder, handleChange}) => {\n    return (\n        <input type='search' placeholder={placeHolder} className='search' onChange={handleChange}/>\n               // onChange={(e) => this.setState({searchField: e.target.value})}/>\n    );\n};\n","import './App.css';\nimport {Component} from \"react\";\nimport {CardList} from \"./components/card-list/card-list.component\";\nimport {SearchBox} from \"./components/search-box/search-box.component\";\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            monsters: [],\n            searchField: ''\n        }\n    }\n\n    componentDidMount() {\n        fetch('https://jsonplaceholder.typicode.com/users')\n            .then(response => response.json())\n            .then(users => this.setState({monsters: users}));\n    }\n\n    render() {\n        const {monsters, searchField} = this.state;\n        const filteredMonsters = monsters.filter((monster) => monster.name.toLowerCase().includes(searchField.toLowerCase()));\n\n        return (\n            <div className=\"App\">\n                <h1>Monsters Rolodex</h1>\n               <SearchBox placeHolder='search monsters' handleChange={(e) => this.setState({searchField: e.target.value})}/>\n                <CardList monsters={filteredMonsters}/>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}